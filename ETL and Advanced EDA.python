# Uber Data Pipeline - Advanced ETL, Analysis, and Visualization

# 1. Import Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sqlalchemy import create_engine

# 2. Load Data
df = pd.read_csv("uber_data.csv")

# 3. Preview Data
print(df.info())
print(df.head())

# 4. Data Cleaning and Transformation
# Handle missing values
df.dropna(inplace=True)

# Convert datetime columns
df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])

# Extract date and time components
df['pickup_hour'] = df['tpep_pickup_datetime'].dt.hour
df['pickup_day'] = df['tpep_pickup_datetime'].dt.day
df['pickup_month'] = df['tpep_pickup_datetime'].dt.month
df['pickup_weekday'] = df['tpep_pickup_datetime'].dt.weekday

df['dropoff_hour'] = df['tpep_dropoff_datetime'].dt.hour
df['trip_duration'] = (df['tpep_dropoff_datetime'] - df['tpep_pickup_datetime']).dt.total_seconds() / 60

# Filter out trips with unrealistic durations or distances
df = df[(df['trip_duration'] > 1) & (df['trip_distance'] > 0)]

# 5. Feature Engineering
df['fare_per_mile'] = np.where(df['trip_distance'] > 0, df['fare_amount'] / df['trip_distance'], 0)
df['total_revenue'] = df['fare_amount'] + df['tip_amount'] + df['tolls_amount']
df['speed_mph'] = (df['trip_distance'] / (df['trip_duration'] / 60)).round(2)

# Categorize trip times
bins = [0, 6, 12, 18, 24]
labels = ['Late Night', 'Morning', 'Afternoon', 'Evening']
df['time_of_day'] = pd.cut(df['pickup_hour'], bins=bins, labels=labels, right=False)

# 6. Data Aggregation and Analysis
hourly_revenue = df.groupby('pickup_hour')['total_revenue'].sum().reset_index()
daily_revenue = df.groupby('pickup_weekday')['total_revenue'].sum().reset_index()
top_locations = df.groupby('pickup_location_id')['total_revenue'].sum().sort_values(ascending=False).head(10)
vendor_revenue = df.groupby('VendorID')['total_revenue'].sum().reset_index()
avg_speed_by_hour = df.groupby('pickup_hour')['speed_mph'].mean().reset_index()

# 7. Data Visualization
plt.figure(figsize=(12, 6))
sns.barplot(x='pickup_hour', y='total_revenue', data=hourly_revenue)
plt.title("Hourly Revenue Distribution")
plt.xlabel("Hour of the Day")
plt.ylabel("Total Revenue")
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x=top_locations.index, y=top_locations.values)
plt.title("Top 10 Pickup Locations by Revenue")
plt.xlabel("Pickup Location ID")
plt.ylabel("Total Revenue")
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(x='pickup_hour', y='speed_mph', data=avg_speed_by_hour)
plt.title("Average Speed by Hour of Day")
plt.xlabel("Hour of the Day")
plt.ylabel("Average Speed (mph)")
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x='pickup_weekday', y='total_revenue', data=daily_revenue)
plt.title("Daily Revenue Distribution")
plt.xlabel("Day of the Week (0 = Monday)")
plt.ylabel("Total Revenue")
plt.show()

plt.figure(figsize=(8, 5))
sns.barplot(x='VendorID', y='total_revenue', data=vendor_revenue)
plt.title("Revenue by Vendor")
plt.xlabel("Vendor ID")
plt.ylabel("Total Revenue")
plt.show()

# 8. Correlation Analysis
plt.figure(figsize=(10, 6))
sns.heatmap(df[['trip_distance', 'fare_amount', 'tip_amount', 'total_revenue', 'trip_duration']].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix of Key Metrics")
plt.show()

# 9. Outlier Detection
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['trip_distance'])
plt.title("Trip Distance Outliers")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['fare_amount'])
plt.title("Fare Amount Outliers")
plt.show()

# 10. ETL - Load Cleaned Data to SQL Database
engine = create_engine('sqlite:///uber_data_warehouse.db')

df.to_sql('uber_trip_data', con=engine, if_exists='replace', index=False)
print("Data successfully loaded to SQL Database.")
